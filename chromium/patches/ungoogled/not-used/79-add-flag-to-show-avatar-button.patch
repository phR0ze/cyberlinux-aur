--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -223,6 +223,19 @@ const FeatureEntry::Choice kExtensionHan
      "always-prompt-for-install"},
 };
 
+const FeatureEntry::Choice kShowAvatarButtonChoices[] = {
+    {flags_ui::kGenericExperimentChoiceDefault, "", ""},
+    {"Always",
+     "show-avatar-button",
+     "always"},
+    {"Incognito and Guest",
+     "show-avatar-button",
+     "incognito-and-guest"},
+    {"Never",
+     "show-avatar-button",
+     "never"}
+};
+
 const FeatureEntry::Choice kTouchEventFeatureDetectionChoices[] = {
     {flags_ui::kGenericExperimentChoiceDisabled, "", ""},
     {flags_ui::kGenericExperimentChoiceEnabled,
@@ -3386,6 +3399,11 @@ const FeatureEntry kFeatureEntries[] = {
      FEATURE_VALUE_TYPE(arc::kEnableUnifiedAudioFocusFeature)},
 #endif  // defined(OS_CHROMEOS)
 
+    {"show-avatar-button",
+     "Show avatar button",
+     "Show avatar button in the browser toolbar", kOsDesktop,
+     MULTI_VALUE_TYPE(kShowAvatarButtonChoices)},
+
 #if defined(OS_WIN)
     {"use-angle", flag_descriptions::kUseAngleName,
      flag_descriptions::kUseAngleDescription, kOsWin,
--- a/chrome/browser/ui/views/toolbar/toolbar_view.cc
+++ b/chrome/browser/ui/views/toolbar/toolbar_view.cc
@@ -237,6 +237,15 @@ void ToolbarView::Init() {
 
   std::unique_ptr<ToolbarPageActionIconContainerView>
       toolbar_page_action_container;
+
+  const base::CommandLine& command_line =
+      *base::CommandLine::ForCurrentProcess();
+  const std::string flag_value =
+      command_line.GetSwitchValueASCII("show-avatar-button");
+
+  bool in_incognito_or_guest_mode = browser_->profile()->IsOffTheRecord() ||
+                                    browser_->profile()->IsGuestSession();
+
   bool show_avatar_toolbar_button = true;
   if (base::FeatureList::IsEnabled(
           autofill::features::kAutofillEnableToolbarStatusChip)) {
@@ -248,11 +257,17 @@ void ToolbarView::Init() {
   } else {
 #if defined(OS_CHROMEOS)
     // ChromeOS only badges Incognito and Guest icons in the browser window.
-    show_avatar_toolbar_button = browser_->profile()->IsOffTheRecord() ||
-                                 browser_->profile()->IsGuestSession();
+    show_avatar_toolbar_button = in_incognito_or_guest_mode;
 #endif
   }
 
+  if (flag_value == "always")
+    show_avatar_toolbar_button = true;
+  else if (flag_value == "incognito-and-guest")
+    show_avatar_toolbar_button = in_incognito_or_guest_mode;
+  else if (flag_value == "never")
+    show_avatar_toolbar_button = false;
+
   std::unique_ptr<AvatarToolbarButton> avatar;
   if (show_avatar_toolbar_button)
     avatar = std::make_unique<AvatarToolbarButton>(browser_);

description: gcc 6 does not support non-trivial designated initializers
author: Michael Gilbert <mgilbert@debian.org>

--- a/gpu/vulkan/vulkan_command_buffer.cc
+++ b/gpu/vulkan/vulkan_command_buffer.cc
@@ -207,21 +207,20 @@ bool VulkanCommandBuffer::SubmissionFini
 void VulkanCommandBuffer::TransitionImageLayout(VkImage image,
                                                 VkImageLayout old_layout,
                                                 VkImageLayout new_layout) {
-  VkImageMemoryBarrier barrier = {
-      .sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
-      .srcAccessMask = GetAccessMask(old_layout),
-      .dstAccessMask = GetAccessMask(new_layout),
-      .oldLayout = old_layout,
-      .newLayout = new_layout,
-      .srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED,
-      .dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED,
-      .image = image,
-      .subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT,
-      .subresourceRange.baseMipLevel = 0,
-      .subresourceRange.levelCount = 1,
-      .subresourceRange.baseArrayLayer = 0,
-      .subresourceRange.layerCount = 1,
-  };
+  VkImageMemoryBarrier barrier;
+  barrier.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
+  barrier.srcAccessMask = GetAccessMask(old_layout);
+  barrier.dstAccessMask = GetAccessMask(new_layout);
+  barrier.oldLayout = old_layout;
+  barrier.newLayout = new_layout;
+  barrier.srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
+  barrier.dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
+  barrier.image = image;
+  barrier.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
+  barrier.subresourceRange.baseMipLevel = 0;
+  barrier.subresourceRange.levelCount = 1;
+  barrier.subresourceRange.baseArrayLayer = 0;
+  barrier.subresourceRange.layerCount = 1;
   vkCmdPipelineBarrier(command_buffer_, GetPipelineStageFlags(old_layout),
                        GetPipelineStageFlags(new_layout), 0, 0, nullptr, 0,
                        nullptr, 1, &barrier);
@@ -233,14 +232,17 @@ void VulkanCommandBuffer::CopyBufferToIm
                                             uint32_t buffer_height,
                                             uint32_t width,
                                             uint32_t height) {
+  VkImageSubresourceLayers subresource = {
+      .aspectMask = VK_IMAGE_ASPECT_COLOR_BIT,
+      .mipLevel = 0,
+      .baseArrayLayer = 0,
+      .layerCount = 1,
+  };
   VkBufferImageCopy region = {
       .bufferOffset = 0,
       .bufferRowLength = buffer_width,
       .bufferImageHeight = buffer_height,
-      .imageSubresource.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT,
-      .imageSubresource.mipLevel = 0,
-      .imageSubresource.baseArrayLayer = 0,
-      .imageSubresource.layerCount = 1,
+      .imageSubresource = subresource,
       .imageOffset = {0, 0, 0},
       .imageExtent = {width, height, 1},
   };
--- a/ui/gl/gl_surface_glx.cc
+++ b/ui/gl/gl_surface_glx.cc
@@ -581,13 +581,13 @@ bool NativeViewGLSurfaceGLX::Initialize(
   }
   size_ = gfx::Size(attributes.width, attributes.height);
 
-  XSetWindowAttributes swa = {
-      .background_pixmap = 0,
-      .bit_gravity = NorthWestGravity,
-      .colormap = g_colormap,
-      .background_pixel = 0,  // ARGB(0,0,0,0) for compositing WM
-      .border_pixel = 0,
-  };
+  XSetWindowAttributes swa;
+  swa.background_pixmap = 0;
+  swa.background_pixel = 0;  // ARGB(0,0,0,0) for compositing WM
+  swa.border_pixel = 0;
+  swa.bit_gravity = NorthWestGravity;
+  swa.colormap = g_colormap;
+
   auto value_mask = CWBackPixmap | CWBitGravity | CWColormap | CWBorderPixel;
   if (ui::IsCompositingManagerPresent() &&
       XVisualIDFromVisual(attributes.visual) == XVisualIDFromVisual(g_visual)) {
--- a/gpu/command_buffer/service/external_vk_image_backing.cc
+++ b/gpu/command_buffer/service/external_vk_image_backing.cc
@@ -39,12 +39,11 @@ VkResult CreateExternalVkImage(SharedCon
                                const gfx::Size& size,
                                bool is_transfer_dst,
                                VkImage* image) {
-  VkExternalMemoryImageCreateInfoKHR external_info = {
-      .sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR,
-      .handleTypes = context_state->vk_context_provider()
+  VkExternalMemoryImageCreateInfoKHR external_info;
+  external_info.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR;
+  external_info.handleTypes = context_state->vk_context_provider()
                          ->GetVulkanImplementation()
-                         ->GetExternalImageHandleType(),
-  };
+                         ->GetExternalImageHandleType();
 
   auto usage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_SAMPLED_BIT;
   if (is_transfer_dst)
@@ -150,12 +149,11 @@ std::unique_ptr<ExternalVkImageBacking>
     return nullptr;
   }
 
-  VkExportMemoryAllocateInfoKHR external_info = {
-      .sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR,
-      .handleTypes = context_state->vk_context_provider()
+  VkExportMemoryAllocateInfoKHR external_info;
+  external_info.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR;
+  external_info.handleTypes = context_state->vk_context_provider()
                          ->GetVulkanImplementation()
-                         ->GetExternalImageHandleType(),
-  };
+                         ->GetExternalImageHandleType();
 
   VkMemoryAllocateInfo mem_alloc_info = {
       .sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
@@ -544,12 +542,12 @@ bool ExternalVkImageBacking::WritePixels
     const base::span<const uint8_t>& pixel_data,
     size_t stride) {
   DCHECK(stride == 0 || size().height() * stride <= pixel_data.size());
-  VkBufferCreateInfo buffer_create_info = {
-      .sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
-      .size = pixel_data.size(),
-      .usage = VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
-      .sharingMode = VK_SHARING_MODE_EXCLUSIVE,
-  };
+  VkBufferCreateInfo buffer_create_info;
+  buffer_create_info.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
+  buffer_create_info.size = pixel_data.size();
+  buffer_create_info.usage = VK_BUFFER_USAGE_TRANSFER_SRC_BIT;
+  buffer_create_info.sharingMode = VK_SHARING_MODE_EXCLUSIVE;
+
   VkBuffer stage_buffer = VK_NULL_HANDLE;
   // TODO: Consider reusing stage_buffer and stage_memory, if allocation causes
   // performance issue.
@@ -563,15 +561,14 @@ bool ExternalVkImageBacking::WritePixels
   VkMemoryRequirements memory_requirements;
   vkGetBufferMemoryRequirements(device(), stage_buffer, &memory_requirements);
 
-  VkMemoryAllocateInfo memory_allocate_info = {
-      .sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
-      .allocationSize = memory_requirements.size,
-      .memoryTypeIndex =
+  VkMemoryAllocateInfo memory_allocate_info;
+  memory_allocate_info.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
+  memory_allocate_info.allocationSize = memory_requirements.size;
+  memory_allocate_info.memoryTypeIndex =
           FindMemoryTypeIndex(context_state_, memory_requirements,
                               VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT |
-                                  VK_MEMORY_PROPERTY_HOST_COHERENT_BIT),
+                                  VK_MEMORY_PROPERTY_HOST_COHERENT_BIT);
 
-  };
   VkDeviceMemory stage_memory = VK_NULL_HANDLE;
   result = vkAllocateMemory(device(), &memory_allocate_info,
                             nullptr /* pAllocator */, &stage_memory);

#MIT License
#Copyright (c) 2017-2020 phR0ze
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

#-------------------------------------------------------------------------------
# Maintained by phR0ze
# credit to Brent Saner <r00t (at) square-r00t (dot) net>
# for the inspiration here https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=freeswitch-git
#-------------------------------------------------------------------------------
_ver=e28abe2929                     # Specific version that seems to work with mod_dingaling
pkgname=freeswitch
pkgver=1.7.0.r32734.e28abe2929
pkgrel=1
pkgdesc="Cross-Platform Scalable FREE Multi-Protocol Soft Switch"
arch=('i686' 'x86_64')
url="http://freeswitch.org/"
license=('MPL')
depends=('curl' 'xz' 'python' 'libtheora' 'unixodbc' 'libjpeg-turbo' 'python2' 'openssl' 'freetype2')
makedepends=('git' 'libjpeg' 'ldns' 'libedit' 'curl' 'python2' 'unixodbc' 'sed' 'make'
    'yasm' 'mpg123' 'lame' 'libsndfile')
provides=('freeswitch')

source=("git+https://freeswitch.org/stash/scm/fs/freeswitch.git#commit=${_ver}"
        'freeswitch.service'
        'addprefix.py'
        'freeswitch.xml'
        'vars.xml')
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP')

install=freeswitch.install

# Minimal modules for a Google/SIP Provider/Linksys solution
modules=(

  # Required modules
  applications/mod_commands         # Handles console commands
  applications/mod_dptools          # Dialplan applications for XML dialplans
  applications/mod_expr             # Dialplan support for expressions
  applications/mod_httapi           # Needed to read files in dialplan
  applications/mod_spandsp          # Standard digital processing functions
  dialplans/mod_dialplan_xml        # Standard xml dialplan support
  event_handlers/mod_event_socket   # Required for CLI to work correctly
  formats/mod_local_stream          # Echo test, playback of local files for sounds and hold music
  formats/mod_native_file           # Echo test, playback of local files for sounds and hold music
  formats/mod_sndfile               # Echo test, playback of local files for sounds and hold music
  formats/mod_tone_stream           # Adds ability to play tone streams for number pressing etc..
  loggers/mod_console               # Console logger used for debugging
  loggers/mod_logfile               # File logger used for debugging

  #?
  formats/mod_png                   # Play png as video defaults
  xml_int/mod_xml_cdr               # XML based call detail record handler
  xml_int/mod_xml_rpc               # XML Remote Procedure Calls
  xml_int/mod_xml_scgi              # Simple common gatway interface

  # Language/scripting choices
  languages/mod_python              # Added: Better scripting language that lua
  say/mod_say_en                    # English speech management and voice prompting

  # SIP Provider/Google/RT31P2
  codecs/mod_g711                   # SIP Provider/Google/RT31P2 common denominator audio codec
  endpoints/mod_dingaling           # Handle outbound calling over Google gmail
  endpoints/mod_sofia               # Handle SIP Provider, Linksys RT31P2 SIP endpoints

  # Optional modules
  #applications/mod_callcenter      # Inbound call queueing system
  #applications/mod_conference      # Conference call support
  #applications/mod_db              # API and dialplan interface to various database backends
  #applications/mod_enum            # Number mapping allowing Freeswitch servers to communicate directly
  #applications/mod_esf             # Multicast support for SIP
  #applications/mod_fifo            # Callcenter application for queuing
  #applications/mod_fsv             # Record and play back video, requires libyuv
  #applications/mod_hash            # Limited datastore backend for dialplan
  #applications/mod_sms             # Chat protocol for messaging
  #applications/mod_valet_parking   # Callwaiting and hold type functionalilty
  #applications/mod_voicemail       # Using Google Voice for voicemail
  #codecs/mod_amr                   # g711 is the only codec SIP Provider/Google/RT31P2 all share
  #codecs/mod_b64                   # g711 is the only codec SIP Provider/Google/RT31P2 all share
  #codecs/mod_g723_1                # g711 is the only codec SIP Provider/Google/RT31P2 all share
  #codecs/mod_g729                  # g711 is the only codec SIP Provider/Google/RT31P2 all share
  #codecs/mod_h26x                  # g711 is the only codec SIP Provider/Google/RT31P2 all share
  #codecs/mod_opus                  # g711 is the only codec SIP Provider/Google/RT31P2 all share
  #dialplans/mod_dialplan_asterisk  # Use the xml dialplan and you won't need this
  #endpoints/mod_loopback           # Useful in some dialplans, I haven't ever used it
  #endpoints/mod_rtc                # Media streaming portion of WebRTC support
  #endpoints/mod_skinny             # ToIP protocol used in Cisco IP Phones e.g. 79xx series
  #endpoints/mod_verto              # Signaling portion of WebRTC support
  #event_handlers/mod_cdr_csv       # Don't need any call logs as using Google Voice for this
  #event_handlers/mod_cdr_sqlite    # Don't need any call logs as using Google Voice for this
  #languages/mod_lua                # Removed: Use python module instead much easier
  #loggers/mod_syslog               # Don't need syslog, no need to centrally collect logs
)

# Use this to generate a new version
#pkgver()
#{
#  cd $srcdir/$pkgname
#  pkgver_tag=$(git for-each-ref refs/tags --sort=-taggerdate --format='%(refname)' --count=1 | sed -e 's@refs/tags/v@@')
#  revcount=$(git rev-list --count HEAD)
#  lastcommit=$(git rev-parse --short HEAD)
#  echo "${pkgver_tag}.r${revcount}.${lastcommit}"
#}

build()
{
 cd $srcdir/$pkgname

  msg "Bootstrapping..."
  ./bootstrap.sh

  msg "Configuring modules..."
  echo '#Minimal modules for simple Google/SIP Provider solution' > modules.conf
  for x in ${modules[@]}; do
    msg2 "Enabling module '$x'"
    echo $x >> modules.conf
  done

  # Configure FreeSWITCH
  # srtp        // Encryption for rtp, google doesn't support so why bother
  # libvpx      // Don't need video support
  # libyuv      // Don't need video support
  ./configure \
    --prefix=/var/lib/freeswitch \
    --with-python=/usr/bin/python2 \
    --disable-srtp \
    --disable-libvpx \
    --disable-libyuv \
    --enable-core-odbc-support \
    --disable-core-pgsql-pkgconfig \
    --bindir=/usr/bin \
    --sbindir=/usr/sbin \
    --localstatedir=/var \
    --sysconfdir=/etc \
    --datarootdir=/usr/share \
    --libexecdir=/usr/lib/freeswitch \
    --libdir=/usr/lib/freeswitch \
    --includedir=/usr/include/freeswitch \
    --with-recordingsdir=/var/spool/freeswitch/recordings \
    --with-dbdir=/var/spool/freeswitch/db \
    --with-pkgconfigdir=/usr/lib/pkgconfig \
    --with-logfiledir=/var/log/freeswitch \
    --with-modinstdir=/usr/lib/freeswitch/mod \
    --with-scriptdir=/usr/share/freeswitch/scripts \
    --with-certsdir=/etc/freeswitch/certs \
    --with-rundir=/run/freeswitch

  # Not multi-thread capable
  msg "Building FreeSWITCH"
  make

  # Download FreeSWITCH sounds
  msg "Downloading FreeSWITCH sounds"
  make cd-moh
  make cd-sounds
}

# Install files into fakeroot and package
#-------------------------------------------------------------------------------
package()
{
    cd $srcdir/$pkgname

    msg "Installing freeswitch"
    make DESTDIR=$pkgdir install
    make DESTDIR=$pkgdir cd-moh-install
    make DESTDIR=$pkgdir cd-sounds-install

    msg2 "Installing systemd unit file"
    install -Dm 0644 $srcdir/$pkgname.service $pkgdir/usr/lib/systemd/system/$pkgname.service

    msg2 "Relocate config examples to /usr/share/doc/$pkgname/examples"
    if [ ! -e $pkgdir/usr/share/doc/$pkgname ]; then
      install -dm 0644 $pkgdir/usr/share/doc/$pkgname
      cp -a $pkgdir/etc/$pkgname $pkgdir/usr/share/doc/$pkgname
      rm -rf $pkgdir/etc/$pkgname/*
    fi

    msg2 "Installing configuration files"
    install -dm 0755 $pkgdir/etc/$pkgname/certs
    install -Dm 0755 $srcdir/addprefix.py $pkgdir/usr/share/$pkgname/scripts/addprefix.py
    install -Dm 0644 $srcdir/freeswitch.xml $pkgdir/etc/$pkgname/freeswitch.xml
    install -Dm 0644 $srcdir/vars.xml $pkgdir/etc/$pkgname/vars.xml
} 

# vim: ts=2:sw=2:sts=2

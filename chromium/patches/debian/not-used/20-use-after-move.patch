description: gcc 6 does not support using a unique_ptr after it has been moved
author: Michael Gilbert <mgilbert@debian.org>

--- a/base/task/sequence_manager/task_queue.cc
+++ b/base/task/sequence_manager/task_queue.cc
@@ -137,7 +137,9 @@ void TaskQueue::ShutdownTaskQueueGracefu
   // If we've not been unregistered then this must occur on the main thread.
   DCHECK_CALLED_ON_VALID_THREAD(associated_thread_->thread_checker);
   impl_->SetOnNextWakeUpChangedCallback(RepeatingCallback<void(TimeTicks)>());
-  impl_->sequence_manager()->ShutdownTaskQueueGracefully(TakeTaskQueueImpl());
+  internal::SequenceManagerImpl* sequence_manager = impl_->sequence_manager();
+  if (sequence_manager)
+    sequence_manager->ShutdownTaskQueueGracefully(TakeTaskQueueImpl());
 }
 
 TaskQueue::TaskTiming::TaskTiming(bool has_wall_time, bool has_thread_time)
--- a/headless/lib/browser/headless_request_context_manager.cc
+++ b/headless/lib/browser/headless_request_context_manager.cc
@@ -164,7 +164,8 @@ class HeadlessProxyConfigMonitor
       public ::network::mojom::ProxyConfigPollerClient {
  public:
   static void DeleteSoon(std::unique_ptr<HeadlessProxyConfigMonitor> instance) {
-    instance->task_runner_->DeleteSoon(FROM_HERE, instance.release());
+    const scoped_refptr<base::SingleThreadTaskRunner>& runner = instance->task_runner_;
+    runner->DeleteSoon(FROM_HERE, instance.release());
   }
 
   explicit HeadlessProxyConfigMonitor(
--- a/chrome/browser/performance_manager/performance_manager.cc
+++ b/chrome/browser/performance_manager/performance_manager.cc
@@ -70,7 +70,8 @@ void PerformanceManager::Destroy(std::un
   DCHECK_EQ(instance.get(), g_performance_manager);
   g_performance_manager = nullptr;
 
-  instance->task_runner_->DeleteSoon(FROM_HERE, instance.release());
+  const scoped_refptr<base::SequencedTaskRunner>& runner = instance->task_runner_;
+  runner->DeleteSoon(FROM_HERE, instance.release());
 }
 
 void PerformanceManager::CallOnGraph(const base::Location& from_here,
--- a/content/browser/cache_storage/legacy/legacy_cache_storage.cc
+++ b/content/browser/cache_storage/legacy/legacy_cache_storage.cc
@@ -1316,8 +1316,8 @@ void LegacyCacheStorage::GetSizeThenClos
 
   for (const auto& cache_metadata : cache_index_->ordered_cache_metadata()) {
     auto cache_handle = GetLoadedCache(cache_metadata.name);
-    LegacyCacheStorageCache::From(cache_handle)
-        ->GetSizeThenClose(
+    LegacyCacheStorageCache* store = LegacyCacheStorageCache::From(cache_handle);
+    store->GetSizeThenClose(
             base::BindOnce(&LegacyCacheStorage::SizeRetrievedFromCache,
                            weak_factory_.GetWeakPtr(), std::move(cache_handle),
                            barrier_closure, accumulator_ptr));
@@ -1357,8 +1357,8 @@ void LegacyCacheStorage::SizeImpl(SizeCa
       continue;
     }
     CacheStorageCacheHandle cache_handle = GetLoadedCache(cache_metadata.name);
-    LegacyCacheStorageCache::From(cache_handle)
-        ->Size(base::BindOnce(&LegacyCacheStorage::SizeRetrievedFromCache,
+    LegacyCacheStorageCache* store = LegacyCacheStorageCache::From(cache_handle);
+    store->Size(base::BindOnce(&LegacyCacheStorage::SizeRetrievedFromCache,
                               weak_factory_.GetWeakPtr(),
                               std::move(cache_handle), barrier_closure,
                               accumulator_ptr));

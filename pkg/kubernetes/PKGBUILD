#MIT License
#Copyright (c) 2017-2020 phR0ze
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

#-------------------------------------------------------------------------------
# Maintained by phR0ze
# https://github.com/kubernetes/kubernetes
# https://github.com/containernetworking/cni
# Kubeadmin is the go forward tool deployment tool
#-------------------------------------------------------------------------------
pkgname=('kubeadm' 'kubectl' 'kubelet' 'kubecni' 'cri-tools')
pkgver=1.13.5
pkgrel=1
criver=1.13.0
cniver=0.6.0
cnipluginsver=0.7.2
pkgdesc='Production-Grade Container Scheduling and Management'
arch=('i686' 'x86_64')
url='https://github.com/kubernetes/kubernetes'
license=('Apache 2.0')
install=kubeadm.install
depends=('glibc' 'bash' 'ebtables' 'ethtool' 'iptables' 'socat' 'docker' 'util-linux')
makedepends=('git' 'go' 'rsync' 'go-bindata' 'docker')
source=("kubernetes-${pkgver}.tar.gz::https://github.com/kubernetes/kubernetes/archive/v${pkgver}.tar.gz"
        "cni-${cniver}.tar.gz::https://github.com/containernetworking/cni/archive/v${cniver}.tar.gz"
        "cni-plugins-${cnipluginsver}.tar.gz::https://github.com/containernetworking/plugins/archive/v${cnipluginsver}.tar.gz"
        "cri-tools-${criver}.tar.gz::https://github.com/kubernetes-incubator/cri-tools/archive/v${criver}.tar.gz"
        "git+https://github.com/kubernetes/release.git#branch=master"
        'kubeadm.install')
sha256sums=('07440c587bd5790fba57cd5605bf51c3b987380056b60f66a6224796e271d39c'
            '802f4a002b4eb774624a9dc1c859d3c9926eb2d862e66a673fc99cfc8bcd7494'
            'd469a73e67a97feebc898f80e884d6114095fb8d6efc2fc82fa6352fd8f440f6'
            '775396561b9deb5e0570747a5da4d54996bb1cdb56b96b957ce3aac17a33a882'
            'SKIP'
            'c838345ec43b7db7676d209756d6fe7b8259f41253f02ba1426eddd129e05294')

# Automated build of kubernetes
#-------------------------------------------------------------------------------
build()
{
    msg "Building CRI Tools"
    cd $srcdir/cri-tools-$criver
    unset GOPATH
    unset GOROOT
    make binaries

    msg "Building K8s"
    cd $srcdir/kubernetes-$pkgver
    build/run.sh make

    msg "Building CNI"
    cd $srcdir/cni-$cniver
    bash -c 'CGO_ENABLED=0 GOOS=linux GOARCH=amd64 ./build.sh'

    msg "Building CNI Plugins"
    cd $srcdir/plugins-$cnipluginsver
    bash -c 'CGO_ENABLED=0 GOOS=linux GOARCH=amd64 ./build.sh'
}

# Create package for kubernetes
#-------------------------------------------------------------------------------
package_cri-tools()
{
    pkgdesc='CLI and validation tools for Kubelet Container Runtime Iterface (CRI)'
    pkgver=$criver

    msg "Packaging CRI Tools"
    cd $srcdir/cri-tools-$criver
    install -dm 755 $pkgdir/usr/bin
    install -m 755 -t $pkgdir/usr/bin _output/bin/crictl
    install -m 755 -t $pkgdir/usr/bin _output/bin/critest
}

package_kubeadm()
{
    pkgdesc='Best practice tooling for creating Kubernetes clusters'

    msg "Packaging kubeadm"
    cd $srcdir/kubernetes-$pkgver
    install -dm 755 $pkgdir/usr/bin
    install -Dm755 _output/dockerized/bin/linux/amd64/kubeadm $pkgdir/usr/bin/
}

package_kubectl()
{
    pkgdesc='CLI for managing Kubernetes clusters'

    msg "Packaging kubectl"
    cd $srcdir/kubernetes-$pkgver
    install -dm 755 $pkgdir/usr/bin
    install -Dm755 _output/dockerized/bin/linux/amd64/kubectl $pkgdir/usr/bin/
}

package_kubelet()
{
    pkgdesc='Kubernetes node agent'

    msg "Packaging kubelet"
    cd $srcdir/kubernetes-$pkgver
    install -dm 755 $pkgdir/usr/bin
    install -Dm755 _output/dockerized/bin/linux/amd64/kubelet $pkgdir/usr/bin/

    # Create kubelet default volumes directory
    install -d $pkgdir/var/lib/kubelet

    # Install kubelet systemd unit file
    cd $srcdir/release/debian/xenial/kubelet/lib/systemd/system
    install -dm 755 $pkgdir/usr/lib/systemd/system
    install -m 644 -t $pkgdir/usr/lib/systemd/system kubelet.service

    # Install kubelet config files
    cd $srcdir/release/debian/xenial/kubeadm/channel/stable/etc/systemd/system
    install -dm 755 $pkgdir/etc/systemd/system/kubelet.service.d/
    install -m 644 -t $pkgdir/etc/systemd/system/kubelet.service.d/ kubelet.service.d/post-1.10/10-kubeadm.conf
}

package_kubecni()
{
    pkgdesc='CNI networking for linux containers with plugins'
    pkgver=$cnipluginsver

    msg "Packaging kubecni"

    msg2 "Packaging CNI"
    cd $srcdir/cni-$cniver
    install -dm 755 $pkgdir/opt/cni/bin
    install -m 755 -t $pkgdir/opt/cni/bin bin/*

    msg2 "Packaging CNI Plugins"
    cd $srcdir/plugins-$cnipluginsver
    install -dm 755 $pkgdir/opt/cni/bin
    install -m 755 -t $pkgdir/opt/cni/bin bin/*
}

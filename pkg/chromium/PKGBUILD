#MIT License
#Copyright (c) 2017-2020 phR0ze
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

#-------------------------------------------------------------------------------
# Maintainer: phR0ze
#-------------------------------------------------------------------------------
# Inspiration and patches from the great work called out below:
# https://github.com/gcarq/inox-patchset
# https://github.com/Eloston/ungoogled-chromium
# https://git.iridiumbrowser.de/cgit.cgi/iridium-browser/
# https://anonscm.debian.org/cgit/pkg-chromium/pkg-chromium.git/tree/debian
# https://git.archlinux.org/svntogit/packages.git/tree/repos/extra-x86_64?h=packages/chromium
#-------------------------------------------------------------------------------
pkgname=chromium
pkgver=80.0.3987.106
pkgrel=1
_launcher_ver=6
pkgdesc="Chromium focused on privacy and the removal of Google Orwellian tracking"
arch=('x86_64')
url="https://www.chromium.org/Home"
license=('BSD')
# pepper-flash and jsoncpp were missing from the archlinux package
depends=('gtk3' 'nss' 'alsa-lib' 'xdg-utils' 'libxss' 'libcups' 'libgcrypt'
         'ttf-liberation' 'systemd' 'dbus' 'libpulse' 'pciutils' 'json-glib'
         'desktop-file-utils' 'hicolor-icon-theme' 'pepper-flash' 'jsoncpp=1.9.1')
makedepends=('python' 'python2' 'gperf' 'yasm' 'mesa' 'ninja' 'nodejs' 'git'
             'pipewire' 'clang' 'lld' 'gn' 'java-runtime-headless')
optdepends=('libva-intel-driver: for hardware video acceleration with Intel GPUs'
            'libva-mesa-driver: for hardware video acceleration with AMD/ATI GPUs'
            'libva-vdpau-driver: for hardware video acceleration with NVIDIA GPUs')
install=chromium.install
source=(https://commondatastorage.googleapis.com/chromium-browser-official/$pkgname-$pkgver.tar.xz
        chromium-launcher-$_launcher_ver.tar.gz::https://github.com/phR0ze/chromium-launcher/archive/v$_launcher_ver.tar.gz)
sha256sums=('2ead924b4414a8a5f085fa0e0df56563ef41bd4290cc403c05d5beec238cbe82'
            '691a1f6a6dd8bca775fde4216153735af9d167f4d5774f007a785bfcb805655e')

# Possible replacements are listed in build/linux/unbundle/replace_gn_files.py
# Keys are the names in the above script; values are the dependencies in Arch
declare -gA _system_libs=(
#  [ffmpeg]=ffmpeg
#  [flac]=flac
#  [fontconfig]=fontconfig
#  [freetype]=freetype2
#  [harfbuzz-ng]=harfbuzz
#  [icu]=icu
#  [libdrm]=
#  [libjpeg]=libjpeg
#  #[libpng]=libpng            # https://crbug.com/752403#c10
#  [libvpx]=libvpx
#  [libwebp]=libwebp
#  [libxml]=libxml2
#  [libxslt]=libxslt
#  [opus]=opus
#  [re2]=re2
#  [snappy]=snappy
#  [yasm]=
#  [zlib]=minizip
)
_unwanted_bundled_libs=(
  ${!_system_libs[@]}
  ${_system_libs[libjpeg]+libjpeg_turbo}
)
depends+=(${_system_libs[@]})

prepare() {
  cd "$srcdir/$pkgname-$pkgver"

  # Apply patches from various distributions
  for patchset in arch debian cyber ungoogled; do
    msg "Applying $patchset patches..."
    for patch in ../../patches/$patchset/*.patch; do
      msg2 "Applying patch $patch"
      patch -Np1 -i $patch
    done
  done

  # Force script incompatible with Python 3 to use /usr/bin/python2
  sed -i '1s|python$|&2|' third_party/dom_distiller_js/protoc_plugins/*.py

  # Setup nodejs dependency
  mkdir -p third_party/node/linux/node-linux-x64/bin
  ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin/

  # Remove bundled libraries for which we will use the system copies; this
  # *should* do what the remove_bundled_libraries.py script does, with the
  # added benefit of not having to list all the remaining libraries
  local _lib
  for _lib in ${_unwanted_bundled_libs[@]}; do
    find "third_party/$_lib" -type f \
      \! -path "third_party/$_lib/chromium/*" \
      \! -path "third_party/$_lib/google/*" \
      \! -path 'third_party/yasm/run_yasm.py' \
      \! -regex '.*\.\(gn\|gni\|isolate\)' \
      -delete
  done

  python2 build/linux/unbundle/replace_gn_files.py \
    --system-libraries "${!_system_libs[@]}"
}

build() {
  make -C chromium-launcher-$_launcher_ver

  cd "$srcdir/$pkgname-$pkgver"

  if check_buildoption ccache y; then
    # Avoid falling back to preprocessor mode when sources contain time macros
    export CCACHE_SLOPPINESS=time_macros
  fi

  export CC=clang
  export CXX=clang++
  export AR=ar
  export NM=nm

  # GN arguments explained
  # https://gitlab.com/noencoding/OS-X-Chromium-with-proprietary-codecs/wikis/List-of-all-gn-arguments-for-Chromium-build
  local _flags=(
    'custom_toolchain="//build/toolchain/linux/unbundle:default"'
    'host_toolchain="//build/toolchain/linux/unbundle:default"'
    'clang_use_chrome_plugins=false'                # arch/ungoogled: don't use chrome clang plugins
    'is_official_build=true'                        # arch: implies is_cfi=true on x86_64
    'treat_warnings_as_errors=false'                # arch/debian: ungoogled: don't worry about warnings
    'fieldtrial_testing_like_official_build=true'   # arch/debian/ungoogled: includes all optimizations suitable for end users
    'ffmpeg_branding="Chrome"'                      # arch/debian: build Chrome version which contains additional codecs
    'proprietary_codecs=true'                       # arch/debian: enables propietary H264, AAC, MP3 and MP4
    'rtc_use_pipewire=true'                         # arch: support for screen sharing on wayland
    'link_pulseaudio=true'                          # arch/debian: use PulseAudio for sound
    'use_gnome_keyring=false'                       # arch/debian: don't use the gnome keyring
    'use_sysroot=false'                             # arch/debian: icecc doesn't work with sysroot
    'linux_use_bundled_binutils=false'              # arch/debian: used the system binutils instead
    'use_custom_libcxx=false'                       # arch/debian: don't use a custom libc
    'enable_hangout_services_extension=true'        # arch: enable for screen sharing, both debian and ungoogle disable this
    'enable_widevine=true'                          # arch/debian/ungoogled: enable multi platform DRM support for media
    'enable_nacl=false'                             # arch/debian/ungoogled: disable native clients
    'enable_swiftshader=false'                      # arch/debian/ungoogled: ??
    'is_debug=false'                                # debian: clean release version
    'use_jumbo_build=true'                          # debian: speed up build by merging source files and compiles them together
    'jumbo_file_merge_limit=8'                      # debian: limit the jumbo merge depth to allow for parallelism
    'enable_vr=false'                               # debian: disable the use of OpenVR 
    'enable_nacl_nonsfi=false'                      # debian/ungoogled: not useing native clients
    'enable_reading_list=false'                     # debian/ungoogled: disable the reading list feature i.e think pocket
    'enable_one_click_signin=false'                 # debian/ungoogled: disable one click sign in
    'enable_iterator_debugging=false'               # debian/ungoogled: turn off iterator debugging should be off when is_debug=false
    'optimize_webui=false'                          # debian/ungoogled: faster build by using Polymer for HTML imports
    'use_unofficial_version_number=false'           # debian/ungoogled: use the official version number
    'enable_hevc_demuxing=true'                     # ungoogled: enable HEVC/H265 demuxing by system libraries
    'enable_mdns=false'                             # ungoogled: disable multicast DNS - requires patch
    'enable_remoting=false'                         # ungoogled: disable ability to do VNC/RDP type connecting via chromium
    'enable_reporting=false'                        # ungoogled: disable reporting
    'enable_service_discovery=false'                # ungoogled: disable discovery - requires patch
    'safe_browsing_mode=0'                          # ungoogled: disable safe browsing, requires patch to work
    'use_official_google_api_keys=false'            # ungoogled: don't fall back on google keys when api keys are missing
    'symbol_level=0'                                # cyberlinux: build faster by making debug impossible
    'blink_symbol_level=0'                          # cyberlinux: build faster by disabling blink debug symbols
    'fatal_linker_warnings=false'                   # cyberlinux: ignore linker warnings with certain versions of binutils
    'enable_ac3_eac3_audio_demuxing=true'           # cyberlinux: enable AC3/EAC3 audio demuxing to HDMI sink

    # No longer needed or are no longer valid
    # https://chromium.googlesource.com/chromium/src.git/+/62.0.3178.1/chrome/common/features.gni
    #'concurrent_links=1'                          # debian: limit the number of linking operations at a time to save memory
    #'v8_enable_backtrace=true'                    # debian: doesn't seem useful
    #'exclude_unwind_tables=true'                  # no longer does anything
    #'enable_google_now=false'                     # feature was removed
    #'enable_hotwording=false'                     # disabled by default
    #'is_clang=true'                               # clang is the default compiler on linux now
  )

  # Facilitate deterministic builds (taken from build/config/compiler/BUILD.gn)
  CFLAGS+='   -Wno-builtin-macro-redefined'
  CXXFLAGS+=' -Wno-builtin-macro-redefined'
  CPPFLAGS+=' -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__='

  # By default ninja tries to use all processors
  gn gen out/Release --args="${_flags[*]}" --script-executable=/usr/bin/python2
  ninja -C out/Release chrome chrome_sandbox chromedriver
}

package() {
  cd chromium-launcher-$_launcher_ver
  make PREFIX=/usr DESTDIR="$pkgdir" install
  install -Dm644 LICENSE \
    "$pkgdir/usr/share/licenses/chromium/LICENSE.launcher"

  cd "$srcdir/$pkgname-$pkgver"

  install -D out/Release/chrome "$pkgdir/usr/lib/chromium/chromium"
  install -Dm4755 out/Release/chrome_sandbox "$pkgdir/usr/lib/chromium/chrome-sandbox"
  ln -s /usr/lib/chromium/chromedriver "$pkgdir/usr/bin/chromedriver"

  install -Dm644 chrome/installer/linux/common/desktop.template \
    "$pkgdir/usr/share/applications/chromium.desktop"
  install -Dm644 chrome/app/resources/manpage.1.in \
    "$pkgdir/usr/share/man/man1/chromium.1"
  sed -i \
    -e "s/@@MENUNAME@@/Chromium/g" \
    -e "s/@@PACKAGE@@/chromium/g" \
    -e "s/@@USR_BIN_SYMLINK_NAME@@/chromium/g" \
    "$pkgdir/usr/share/applications/chromium.desktop" \
    "$pkgdir/usr/share/man/man1/chromium.1"

  cp \
    out/Release/{chrome_{100,200}_percent,resources}.pak \
    out/Release/{*.bin,chromedriver} \
    "$pkgdir/usr/lib/chromium/"
  install -Dm644 -t "$pkgdir/usr/lib/chromium/locales" out/Release/locales/*.pak

  if [[ -z ${_system_libs[icu]+set} ]]; then
    cp out/Release/icudtl.dat "$pkgdir/usr/lib/chromium/"
  fi

  for size in 22 24 48 64 128 256; do
    install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \
      "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  for size in 16 32; do
    install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
      "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  install -Dm644 LICENSE "$pkgdir/usr/share/licenses/chromium/LICENSE"

  # Install Custom configuration 
  # - launcher.conf: list of command line options to give to chromium when starting
  #   https://peter.sh/experiments/chromium-command-line-switches/
  # - master_preferences: acts as a template for the first run then user can edit them
  #   http://www.chromium.org/administrators/configuring-other-preferences
  # - policy.json: is a set of policies to configure chromium with
  #-----------------------------------------------------------------------------
  install -Dm644 $srcdir/../config/launcher.conf -t $pkgdir/etc/chromium
  install -Dm644 $srcdir/../config/master_preferences -t $pkgdir/etc/chromium
  install -Dm644 $srcdir/../config/policy.json -t $pkgdir/etc/chromium/policies/recommended
}

# vim: ts=2:sw=2:sts=2

description: gcc 6 cannot automatically resolve the this pointer in a lambda
author: Michael Gilbert <mgilbert@debian.org>

--- a/chrome/browser/usb/web_usb_service_impl.cc
+++ b/chrome/browser/usb/web_usb_service_impl.cc
@@ -143,7 +143,7 @@ void WebUsbServiceImpl::OnPermissionRevo
     if (!device_info)
       return true;
 
-    return !HasDevicePermission(*device_info);
+    return !this->HasDevicePermission(*device_info);
   });
 }
 
--- a/chrome/browser/ui/views/infobars/infobar_container_view.cc
+++ b/chrome/browser/ui/views/infobars/infobar_container_view.cc
@@ -67,7 +67,7 @@ InfoBarContainerView::~InfoBarContainerV
 void InfoBarContainerView::Layout() {
   const auto set_bounds = [this](int top, auto* child) {
     const int height = static_cast<InfoBarView*>(child)->computed_height();
-    child->SetBounds(0, top, width(), height);
+    child->SetBounds(0, top, this->width(), height);
     return top + height;
   };
   DCHECK_EQ(content_shadow_, children().back());
--- a/ui/views/controls/textfield/textfield.cc
+++ b/ui/views/controls/textfield/textfield.cc
@@ -897,7 +897,7 @@ bool Textfield::SkipDefaultKeyEventProce
   std::vector<ui::TextEditCommandAuraLinux> commands;
   if (delegate && delegate->MatchEvent(event, &commands)) {
     const auto is_enabled = [this](const auto& command) {
-      return IsTextEditCommandEnabled(command.command());
+      return this->IsTextEditCommandEnabled(command.command());
     };
     if (std::any_of(commands.cbegin(), commands.cend(), is_enabled))
       return true;
--- a/ui/views/widget/desktop_aura/x11_topmost_window_finder.cc
+++ b/ui/views/widget/desktop_aura/x11_topmost_window_finder.cc
@@ -26,7 +26,7 @@ aura::Window* X11TopmostWindowFinder::Fi
       DesktopWindowTreeHostX11::GetAllOpenWindows();
   if (std::none_of(local_process_windows.cbegin(), local_process_windows.cend(),
                    [this](auto* window) {
-                     return ShouldStopIteratingAtLocalProcessWindow(window);
+                     return this->ShouldStopIteratingAtLocalProcessWindow(window);
                    }))
     return nullptr;
 
